# Standard library imports
import os
from html import escape
import asyncio
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

# Third-party imports
from flask import Flask, render_template, request, jsonify
from crewai import Agent, Task, Crew
import openai
from langchain_openai import ChatOpenAI
from langchain_anthropic import ChatAnthropic
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env file


app = Flask(__name__)


# Set your OpenAI API key (required for crewAI)
openai_api_key = os.getenv("OPENAI_API_KEY")
anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
perplexity_api_key = os.getenv("PERPLEXITY_API_KEY")
client = openai.Client(api_key=os.getenv("OPENAI_API_KEY"))


# Create LLM configurations
perplexity_llm = ChatOpenAI(
    model="perplexity/llama-3.1-sonar-large-128k-online",  # This model includes web search
    api_key=os.getenv("PERPLEXITY_API_KEY"),
    base_url="https://api.perplexity.ai",
    temperature=0.7,
)
claude_llm = ChatOpenAI(
    model="anthropic/claude-3-5-sonnet-20241022",  # Add provider prefix
    api_key=os.getenv("ANTHROPIC_API_KEY"),
    base_url="https://api.anthropic.com/v1",
    temperature=0.7,
    max_tokens=1000  # Limit response to 1000 tokens
)
gpt4_llm = ChatOpenAI(
    model="gpt-4o-mini",
    temperature=0.7
)


# Store conversation history in memory
conversation_history = []
consolidated_report = {}

def escape_special_characters(content):
    # Escape problematic characters in JSON strings
    content = content.replace("\\", "\\\\")  # Escape backslashes
    content = content.replace("\"", "\\\"")  # Escape double quotes
    content = content.replace("\n", " ")     # Replace newlines with spaces instead of escaping
    content = content.replace("\t", "\\t")   # Escape tabs
    return content
    

@app.route('/')
def index():
#    return render_template('index.html', company_name="Company Name", consolidated_report=consolidated_report)
    return render_template('index.html')
@app.route('/chat', methods=['POST'])
async def chat():
    company_name = request.form['company'].title()  # Convert to title case

    
    ##### Format Crew

    format_agent = Agent(
        role="Formatter",
        goal="Ensure that the content provided is properly formatted as valid HTML, clean, and ready for direct rendering in a web browser or embedding within a container without requiring further processing.",
        backstory=(
            "You are an expert in content formatting and web development, specializing in optimizing outputs for seamless integration. "
            "Your primary responsibility is to clean and validate outputs generated by other agents, ensuring they are well-structured, semantically correct HTML snippets. "
            "These snippets will be inserted into a Python object list, serialized into JSON, and embedded within a larger container with predefined <head> formatting. "
            "You must exclude any extraneous or redundant tags and ensure compatibility with the target environment. "
            "Your expertise ensures that the content integrates smoothly without rendering issues, duplications, or conflicts."
        ),
        llm=gpt4_llm
    )
    format_task = Task(
        description=(
            "Take the provided content and reformat it into clean, semantically valid HTML for direct insertion into a Python object list that will be serialized into JSON. "
            "This JSON will then be rendered within a container that already includes a pre-defined <head> section. "
            "Ensure the following:"
            "\n  - All content is wrapped in appropriate HTML tags (e.g., <p>, <h1>, <h2>, <ul>, <li>)."
            "\n  - Remove any Markdown artifacts, code fences (` ``` `), or extraneous formatting."
            "\n  - Exclude unnecessary metadata elements such as <meta charset=\"UTF-8\">, <meta name=\"viewport\">, or any other content inside <head> tags."
            "\n  - Ensure proper nesting and closing of HTML tags to avoid rendering issues."
            "\n  - Keep headings hierarchical and semantically correct (e.g., <h1> for the main heading, <h2> for subheadings)."
            "\n  - Content must be visually clear and easy to read, with proper use of paragraphs, spacing, and semantic HTML elements."
            "\n  - Do not include styles, scripts, or any <head> metadata as these will already exist in the container."
        ),
        expected_output=(
            "A complete, well-formatted HTML snippet that adheres to the instructions. "
            "The output must be clean, semantically valid HTML, ready for embedding within a Python object list, JSON serialization, and subsequent rendering. "
            "No extraneous <head> elements, markdown artifacts, metadata tags, or unnecessary artifacts should be present in the final response."
        ),
        agent=format_agent
    )

    
    # ##### Overview Crew

    overview_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and summarize sustainability (particularly pertaining to ghg emissions) at {company_name}, using the most recent available data",
        backstory="You're an expert in carbon emissions and sustainability, knowledgeable about corporate sustainability strategies and industry best practices.",
        llm=perplexity_llm
    )
    overview_research_task = Task(
        description=(
            f"Research and analyze {company_name}'s sustainability strategy, focusing on GHG emissions. "
            "\nFor companies with public sustainability information:"
            "\n- FIRST: Identify and use ONLY the single most recent sustainability/ESG report or disclosure, which should be published in the last 12 months:"
            "\n  • State the exact title, date of this report, and date of publishing at the beginning"
            "\n  • Do not use any data from older reports"
            "\n  • If finding conflicting dates, use only the most recent"
            "\n- Key elements to cover from this single report:"
            "\n  • Overall sustainability approach and governance"
            "\n  • GHG emissions inventory status"
            "\n  • Major reduction initiatives"
            "\n  • Key partnerships and collaborations"
            "\n  • Progress tracking and reporting methods"
            "\nFor companies without public sustainability information:"
            "\n- Based on the company's size, sector, and operations, provide:"
            "\n  • Expected sustainability governance structure"
            "\n  • Typical GHG emissions management approach"
            "\n  • Common reduction strategies for their industry"
            "\n  • Standard reporting and tracking methods"
            "\n  • Relevant industry benchmarks and peer practices"
            "\nWrite in clear paragraphs with an unlabeled opening context and closing summary. "
            "Clearly state whether the findings are based on public data or industry expectations. "
            "If using public data, prominently cite the specific report date and title. "
            "Avoid referencing the analysis as 'the analysis' or 'the report'."
            "The heading should be 'Emissions Overview'."
        ),
        agent=overview_researcher_agent,
        expected_output=f"A comprehensive overview of {company_name}'s sustainability strategy, using only the single most recent available report or providing industry-appropriate expectations."
    )
    overview_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the provided analysis of {company_name} is clear, comprehensive, and accurate",
        backstory="You are a quality assurance analyst working with your team to ensure the provided analysis is clear, comprehensive, and accurate. Make sure no assumptions are made and the output is the best analysis possible",
        llm=claude_llm
    )
    overview_quality_assurance_task = Task(
        description=(
            f"Review and refine the overview analysis for {company_name}. Your goal is to improve clarity, accuracy, and coherence. Ensure:"
            "\n- Begin with a 'Emissions Overview' heading. Then, have content flow naturally from an opening context, to various sections, ending with a closing summary; context and closing summary should not have labels"
            "\n- VERIFY that only the single most recent sustainability report is used:"
            "\n  • Remove any data from older reports"
            "\n  • Confirm the report date is the most recent available"
            "\n  • Remove any mixed temporal references"
            "\n- The source document and its date are clearly cited at the beginning"
            "\n- Clear distinction between company-specific information and industry expectations"
            "\n- Information flows logically through key strategic elements"
            "\n- Industry expectations are well-justified based on company size and sector"
            "\n- Do not add any meta-commentary about the analysis itself"
            "\n- Do not include notes about refinements or improvements made to the analysis"
            "\n- End with the closing summary and sources, without any additional commentary"
            "\nFocus on directly editing the content to enhance readability and accuracy, maintaining a natural flow."
        ),
        expected_output="A refined overview that presents emissions information clearly and accurately from the single most recent source, ending with the closing summary.",
        agent=overview_quality_assurance_agent
    )
    overview_crew = Crew(
        agents=[overview_researcher_agent, overview_quality_assurance_agent, format_agent],
        tasks=[overview_research_task, overview_quality_assurance_task, format_task],
        verbose=True
    )


    #### Scope 1/2/3 Crew

    scopes_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and analyze Scope 1, 2, and 3 emissions for {company_name}, using the most recent available data",
        backstory="You're an expert in carbon emissions and sustainability, knowledgeable about GHG inventory processes and reporting methodologies.",
        llm=perplexity_llm
    )
    scopes_research_task = Task(
        description=(
            f"Conduct a thorough analysis of Scope 1, 2, and 3 emissions for {company_name}. "
            "\nFor companies with public emissions data:"
            "\n- Use ONLY the most recent official company disclosure as the source of truth, clearly stating:"
            "\n  • The reporting date"
            "\n  • The specific source document"
            "\nScope 1:"
            "\n- Direct emissions from owned or controlled sources"
            f"\n- Specific examples relevant to {company_name}'s operations"
            "\n- Quantified emissions from most recent report"
            "\nScope 2:"
            "\n- Indirect emissions from purchased energy from most recent report"
            "\n- Clearly state whether location-based or market-based methodology is used"
            "\n- Explain the chosen methodology and why it's used"
            "\n- Specific energy sources and consumption patterns"
            "\n- If market-based, include impact of renewable energy purchases"
            "\nScope 3:"
            "\n- Value chain emissions across relevant categories from most recent report"
            "\n- Specific examples of significant emission sources"
            "\n- Areas of focus for reduction efforts"
            "\nEmissions Breakdown:"
            "\n- Percentage allocation across scopes from most recent report (or industry averages if needed)"
            "\n- Clearly indicate whether figures are company-specific or industry standard"
            "\n- Include benchmarks if available and appropriate"
            "\nFor companies without public emissions data:"
            "\n- Based on the company's size, sector, and operations, provide:"
            "\n  • Expected sources of Scope 1 emissions (direct operations)"
            "\n  • Likely Scope 2 emission sources (energy consumption patterns)"
            "\n  • Probable Scope 3 emission hotspots in their value chain"
            "\n  • Typical emissions breakdown for their industry"
            "\nWrite in clear paragraphs with an unlabeled opening context and closing summary. "
            "Clearly state whether the findings are based on public data or industry expectations. "
            "If using public data, cite the specific report date and title. "
            "Avoid referencing the analysis as 'the analysis' or 'the report'."
            "The heading should be 'Scopes 1, 2, & 3 Emissions'."
            "Do not include emissions reduction targets or initiatives."
        ),
        agent=scopes_researcher_agent,
        expected_output=f"A comprehensive analysis of {company_name}'s emissions across all scopes, using only the most recent available data or providing industry-appropriate expectations."
    )
    scopes_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the provided analysis of {company_name} is clear, comprehensive, and accurate",
        backstory="You are a quality assurance analyst working with your team to ensure the provided analysis is clear, comprehensive, and accurate. Make sure no assumptions are made and this is the best analysis possible",
        llm=claude_llm
    )
    scopes_quality_assurance_task = Task(
        description=(
            f"Review and refine the emissions analysis for {company_name}. Your goal is to improve clarity, accuracy, and coherence. Ensure:"
            "\n- Begin with a 'Scopes 1, 2, & 3 Emissions' heading. Then, have content flow naturally from an opening context, to various sections, ending with a closing summary; context and closing summary should not have labels"
            "\n- Clear distinction between company-specific data and industry expectations"
            "\n -Labeled sections for each Scope"
            "\n- Both location-based and market-based Scope 2 emissions are properly explained"
            "\n- All data sources and dates are clearly cited"
            "\n- Information flows logically through each scope"
            "\n- Industry expectations are well-justified based on company size and sector"
            "\n- Emissions breakdown is clearly stated and noted as either company-specific or industry standard"
            "\n-Avoid referencing the analysis as 'the analysis' or 'the report'."
            "\nFocus on directly editing the content to enhance readability and accuracy, maintaining a natural flow."
        ),
        expected_output="A refined and improved analysis that flows naturally from context through details to summary, accurately representing either the company's actual emissions or providing well-reasoned industry expectations.",
        agent=scopes_quality_assurance_agent
    )
    scopes_crew = Crew(
        agents=[scopes_researcher_agent, scopes_quality_assurance_agent, format_agent],
        tasks=[scopes_research_task, scopes_quality_assurance_task, format_task],
        verbose=True
    )


    #### Tools and Partners Crew

    tools_partners_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research how {company_name} manages sustainability internally through teams, tools, and partnerships",
        backstory="You're an expert in corporate sustainability structures, technology, and consulting. You understand how organizations of different sizes typically manage sustainability, from dedicated teams to distributed responsibility, and the tools and partners they leverage.",
        llm=perplexity_llm
    )
    tools_partners_research_task = Task(
        description=(
            f"Research and analyze how {company_name} manages their sustainability efforts, particularly GHG emissions. Focus on:"
            "\n  1. Internal Teams & Structure:"
            "\n     - Dedicated sustainability/ESG teams and their roles"
            "\n     - Other teams with sustainability responsibilities"
            "\n     - Reporting structure and integration with broader organization"
            "\n  2. Technology & Tools:"
            "\n     - Emissions tracking and reporting platforms"
            "\n     - Data collection and verification systems"
            "\n     - Other sustainability management tools"
            "\n  3. External Partners:"
            "\n     - Consulting firms and advisors"
            "\n     - Verification and assurance partners"
            "\n     - Other sustainability service providers"
            "\nIf this information isn't publicly available, provide enablement and recommendations based on industry best practices for a company of this size and sector. "
            "Clearly distinguish between actual company information and enablement & recommendations. "
            "If the company has established practices, focus only on what is known and do not provide recommendations."
            "The heading should be 'Teams, Tools, & Partners'."
        ),
        agent=tools_partners_researcher_agent,
        expected_output=f"A comprehensive analysis of how {company_name} manages sustainability through internal teams, tools, and partnerships."
    )
    tools_partners_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the analysis of {company_name}'s internal teams, technology, and partners is accurate and appropriately scoped",
        backstory="You are a quality assurance analyst specializing in corporate sustainability structures & technology. You ensure information is accurate and enablement &recommendations, when needed, align with industry best practices.",
        llm=claude_llm
    )
    tools_partners_quality_assurance_task = Task(
        description=(
            f"Review and refine the teams, tools, and partners analysis for {company_name}. Your goal is to improve clarity, accuracy, and coherence. Ensure:"
            "\n  - The content flows naturally with an opening context paragraph and closing summary, without explicit 'Introduction' or 'Conclusion' labels"
            "\n  - The analysis clearly distinguishes between actual company information and enablement & recommendations"
            "\n  - Recommendations are omitted if the company has established practices"
            "\n  - The content reflects the company's size and industry context"
            "\n  - Internal roles, technology, and partners are clearly explained"
            "\n  - All information is current and accurately sourced"
            "\n  - The narrative style is maintained with clear sections, paragraphs, and appropriate use of bullet points and lists"
            "\nFocus on directly editing the content to enhance readability and accuracy. Maintain a natural flow from opening context through key points to final summary, without explicit section labels for introduction or conclusion."
        ),
        expected_output="A refined and improved analysis that flows naturally from context through details to summary, accurately representing the company's sustainability management structure, internal tools, and partnerships, or providing appropriate enablement and recommendations if existing operations are not well-understood.",
        agent=tools_partners_quality_assurance_agent
    )
    tools_partners_crew = Crew(
        agents=[tools_partners_researcher_agent, tools_partners_quality_assurance_agent, format_agent],
        tasks=[tools_partners_research_task, tools_partners_quality_assurance_task, format_task],
        verbose=True
    )


    #### Reporting Crew

    reporting_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and analyze {company_name}'s public sustainability reporting history and framework adherence",
        backstory="You're an expert in sustainability reporting and disclosure frameworks, with deep knowledge of various reporting standards, their requirements, and industry-specific reporting practices.",
        llm=perplexity_llm
    )
    reporting_research_task = Task(
        description=(
            f"Research and analyze {company_name}'s sustainability reporting practices. Focus on:"
            "\n  1. Annual Sustainability Reports:"
            "\n     - History of sustainability/ESG report publications"
            "\n     - Key emissions disclosures and trends"
            "\n     - Report quality and comprehensiveness"
            "\n  2. Framework Reporting & Compliance:"
            "\n     - GHG Protocol alignment"
            "\n     - CDP submissions and scores"
            "\n     - SBTi commitments and validation"
            "\n     - TCFD alignment"
            "\n     - GRI reporting"
            "\n     - Other relevant frameworks (e.g., SASB, ISSB)"
            "\nIf the company hasn't publicly reported, provide framework recommendations based on:"
            "\n     - Company size and industry"
            "\n     - Regulatory requirements and trends"
            "\n     - Investor and stakeholder expectations"
            "\n     - Industry peer practices"
            "\nClearly distinguish between actual reporting history and recommendations. If they already publicly report, do not provide recommendations, unless they are missing aspects of reporting that are industry standard."
            "The heading should be 'Public Reporting'."
        ),
        agent=reporting_researcher_agent,
        expected_output=f"A comprehensive analysis of {company_name}'s sustainability reporting practices or appropriate reporting recommendations."
    )
    reporting_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the reporting analysis for {company_name} is accurate and appropriately detailed",
        backstory="You are a quality assurance analyst specializing in sustainability reporting and frameworks. You ensure reporting information is accurate and recommendations align with current best practices and requirements.",
        llm=claude_llm
    )
    reporting_quality_assurance_task = Task(
        description=(
            f"Review the reporting analysis for {company_name}. Ensure:"
            "\n  - Accurate representation of current reporting practices"
            "\n  - Response contains clear sections containing paragraphs with limited use of bullet points and lists. "
            "\n  - Clear distinction between actual reporting and recommendations"
            "\n  - No recommendations if established reporting exists, unless the company is missing aspects of reporting that are industry standard"
            "\n  - Framework recommendations are appropriate for size/industry"
            "\n  - Analysis reflects current reporting requirements"
            "\n  - Information is current and accurately sourced"
            "\n  - Reporting history is clearly presented"
            "\n  - Avoid referencing the analysis as 'the analysis' or 'the report'."
            "\n- Begin with a 'Public Reporting' heading. Then, have content flow naturally from an opening context, to various sections, ending with a closing summary and sources; context and closing summary should not have labels"
        ),
        expected_output="A refined analysis that accurately represents the company's reporting practices or provides appropriate reporting recommendations.",
        agent=reporting_quality_assurance_agent
    )
    reporting_crew = Crew(
        agents=[reporting_researcher_agent, reporting_quality_assurance_agent, format_agent],
        tasks=[reporting_research_task, reporting_quality_assurance_task, format_task],
        verbose=True
    )


    #### Compliance Crew

    compliance_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and analyze {company_name}'s compliance obligations and status regarding GHG emissions regulations",
        backstory="You're an expert in environmental compliance and regulations, with deep knowledge of emissions-related requirements at federal, state, and local levels. You understand both current regulations and emerging requirements.",
        llm=perplexity_llm
    )
    compliance_research_task = Task(
        description=(
            f"Research and analyze {company_name}'s regulatory compliance requirements and status regarding GHG emissions. "
            "Structure your response as a clear narrative that covers:"
            "\n- Current compliance status and any known issues"
            "\n- Key federal regulations affecting the company"
            "\n- Relevant state and local requirements"
            "\n- Financial and operational implications of compliance"
            "\nIf compliance information isn't publicly available, provide a narrative overview of applicable regulations based on the company's size, industry, and location. "
            "\n- Response contains clear sections containing paragraphs with limited use of bullet points and lists. "
            "Clearly distinguish between known compliance status and general regulatory guidance. "
        ),
        agent=compliance_researcher_agent,
        expected_output=f"A clear, narrative analysis of {company_name}'s emissions-related compliance obligations and status."
    )
    compliance_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the compliance analysis for {company_name} is accurate, comprehensive, and appropriately detailed",
        backstory="You are a quality assurance analyst specializing in environmental compliance. You ensure regulatory information is accurate and recommendations reflect current requirements.",
        llm=claude_llm
    )
    compliance_quality_assurance_task = Task(
        description=(
            f"Review the compliance analysis for {company_name}. Ensure:"
            "\n  - The heading is be 'Regulatory Compliance'."
            "\n  - Accurate representation of applicable regulations pertaining to ghg emissions reporting and reduction."
            "\n  - Clear distinction between actual compliance status and general guidance"
            "\n  - Appropriate coverage of federal, state, and local requirements"
            "\n  - Accurate description of compliance implications"
            "\n  - Current and emerging regulatory considerations"
            "\n  - Clear presentation of compliance risks and obligations"
            "\n  - Non-emissions related regulations are not included"
            "\n  - Avoid referencing the analysis as 'the analysis' or 'the report'."
            "\n  - Response contains clear sections containing paragraphs with limited use of bullet points and lists. "
        ),
        expected_output="A refined analysis that accurately represents the company's regulatory obligations and compliance status.",
        agent=compliance_quality_assurance_agent
    )
    compliance_crew = Crew(
        agents=[compliance_researcher_agent, compliance_quality_assurance_agent, format_agent],
        tasks=[compliance_research_task, compliance_quality_assurance_task, format_task],
        verbose=True
    )


    #### Reduction Targets Crew

    targets_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and analyze {company_name}'s emissions reduction targets and progress",
        backstory="You're an expert in corporate emissions reduction strategies and target-setting frameworks, with deep knowledge of science-based targets, industry benchmarks, and successful reduction pathways; you have access to current web information.",
        llm=perplexity_llm
    )
    targets_research_task = Task(
        description=(
            f"Research and analyze {company_name}'s emissions reduction targets and progress. Write a clear narrative that addresses:"
            "\nFor companies with public targets:"
            "\n- Their specific emissions reduction targets and target years (explicitly citing the most recent report). State their target(s) in the beginning and bold them."
            "\n- Progress towards these targets using ONLY the most recent reported data, including:"
            "\n  • The reporting date"
            "\n  • Whether goals are net zero or absolute reductions"
            "\n  • Emissions accounting methodology (location-based vs. market-based, specifying which is used for target tracking)"
            "\n  • Any significant changes or updates"
            "\n  • Any third-party validation (e.g., SBTi)"
            "\nFor companies without public targets:"
            "\n- Provide industry-appropriate target recommendations based on:"
            "\n  • Company size and operational scope"
            "\n  • Industry-specific challenges and opportunities"
            "\n  • Peer company benchmarks"
            "\n  • Regulatory expectations and investor requirements"
            "\nWrite in clear sections containing paragraphs with limited use of bullet points and lists. "
        ),
        agent=targets_researcher_agent,
        expected_output=f"A comprehensive narrative analysis of {company_name}'s emissions reduction targets or appropriate target recommendations."
    )
    targets_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the targets analysis for {company_name} is accurate, well-structured, and appropriately detailed",
        backstory="You are a quality assurance analyst specializing in emissions reduction strategies and target-setting. You ensure target information is accurate and recommendations, if the company lacks existing targets, reflect current best practices.",
        llm=claude_llm
    )
    targets_quality_assurance_task = Task(
        description=(
            f"Review the targets analysis for {company_name}. Ensure:"
            "\n- Target(s) are stated at the beginning and bolded"
            "\n- The heading is be 'Emissions Reduction Targets'."
            "\n- All data is from the most recent reporting period with clear dates"
            "\n- Emissions accounting methodology is clearly explained"
            "\n- Information flows logically without contradictions"
            "\n- Sources are cited throughout the response (exclude URLs)"
            "\n- Clear distinction between company data and recommendations, which should only be provided if the company lacks existing targets."
            "\n- Response contains labeled sections containing paragraphs with limited use of bullet points and lists. "
            "\n- Avoid referencing the analysis as 'the analysis' or 'the report'."
        ),
        expected_output="A refined analysis that clearly presents the company's reduction targets or provides appropriate target recommendations in an engaging narrative format.",
        agent=targets_quality_assurance_agent
    )
    targets_crew = Crew(
        agents=[targets_researcher_agent, targets_quality_assurance_agent, format_agent],
        tasks=[targets_research_task, targets_quality_assurance_task, format_task],
        verbose=True
    )


    #### Decarbonization Crew

    decarbonization_researcher_agent = Agent(
        role="Researcher",
        goal=f"Research and analyze {company_name}'s decarbonization strategies and initiatives",
        backstory="You're an expert in corporate decarbonization strategies, with deep knowledge of industry-specific solutions, emerging technologies, and successful implementation approaches.",
        llm=perplexity_llm  # Using Perplexity for web search capabilities
    )
    decarbonization_research_task = Task(
        description=(
            f"Research and analyze {company_name}'s decarbonization strategies. Write a clear narrative that addresses:"
            "\nFor companies with public decarbonization initiatives:"
            "\n- Current implemented strategies (cite the most recent source):"
            "\n  • Specific projects and their implementation status"
            "\n  • Technology investments and their expected impact"
            "\n  • Supply chain and operational changes"
            "\n  • Renewable energy procurement"
            "\n- Quantified impact of initiatives where available"
            "\n- Timeline for planned initiatives"
            "\n- Investment commitments and resources allocated"
            "\n- Any partnerships or collaborations supporting these efforts"
            "\nFor companies without public initiatives:"
            "\n- Provide sector-appropriate recommendations based on:"
            "\n  • Company operations and emission sources"
            "\n  • Industry best practices and proven solutions"
            "\n  • Available technologies and their maturity"
            "\n  • Cost-effectiveness and implementation complexity"
            "\n  • Regulatory requirements and incentives"
         "\nWrite in clear sections containing paragraphs with limited use of bullet points and lists. "
            "The heading should be 'Decarbonization'."
        ),
        agent=decarbonization_researcher_agent,
        expected_output=f"A comprehensive analysis of {company_name}'s decarbonization strategies or appropriate recommendations."
    )
    decarbonization_quality_assurance_agent = Agent(
        role="Quality Assurance",
        goal=f"Ensure the decarbonization analysis for {company_name} is accurate, practical, and well-supported",
        backstory="You are a quality assurance analyst specializing in corporate decarbonization strategies. You ensure recommendations, if the company lacks existing initiatives, are practical and information is accurate.",
        llm=claude_llm  # Using claude for analytical review
    )
    decarbonization_quality_assurance_task = Task(
        description=(
            f"Review the decarbonization analysis for {company_name}. Ensure:"
            f"\n- The heading is be 'Decarbonization at {company_name}'."
            "\n- Response contains clear sections containing paragraphs with limited use of bullet points and lists. "
            "\n- All initiatives are from recent sources with clear dates"
            "\n- Implementation status is clearly indicated for each strategy"
            "\n- Quantitative impacts are accurately reported"
            "\n- Technical solutions are explained in accessible language"
            "\n- Recommendations are practical and appropriate for company size/sector"
            "\n- Sources are cited throughout the response (exclude URLs)"
            "\n- Clear distinction between existing initiatives and recommendations, which should only be provided if the company lacks existing initiatives."
            "\n- Avoid referencing the analysis as 'the analysis' or 'the report'."
        ),
        expected_output="A refined analysis that clearly presents the company's decarbonization strategies or provides appropriate recommendations in an engaging narrative format.",
        agent=decarbonization_quality_assurance_agent
    )
    decarbonization_crew = Crew(
        agents=[decarbonization_researcher_agent, decarbonization_quality_assurance_agent, format_agent],
        tasks=[decarbonization_research_task, decarbonization_quality_assurance_task, format_task],
        verbose=True
    )


    ### Crew Kickoffs

    ### Processing Structure
    # Kickoff crew
    # Pull raw format output
    # Clean up the response - remove HTML code fences and strip whitespace
    # Directly escape the cleaned content without additional JSON serialization


    ### Remove to run

    async def run_crew_kickoffs(company_name):
        print(f"Starting run_crew_kickoffs at {datetime.now()}")
        executor = ThreadPoolExecutor(max_workers=2)  # Only 2 workers
        
        async def process_crew(crew, task_name):
            start_time = datetime.now()
            print(f"[{start_time}] Starting crew: {task_name}")
            
            try:
                loop = asyncio.get_event_loop()
                await loop.run_in_executor(executor, crew.kickoff)
                
                response_raw = format_task.output.raw
                cleaned = response_raw.strip('```html').strip('```').strip()
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                print(f"[{end_time}] Completed crew: {task_name} (Duration: {duration}s)")
                return task_name, escape_special_characters(cleaned)
            except Exception as e:
                print(f"Error in crew {task_name}: {str(e)}")
                raise
        
        try:
            crews = [
                (overview_crew, "overview"),
                (scopes_crew, "scopes"),
                (tools_partners_crew, "tools-partners"),
                (reporting_crew, "reporting"),
                (compliance_crew, "compliance"),
                (targets_crew, "targets"),
                (decarbonization_crew, "decarbonization")
            ]
            
            results = {}
            active_tasks = []
            remaining_crews = crews[2:]  # Store remaining crews after initial 2
            
            # Start first 2 crews immediately
            for crew, task_name in crews[:2]:
                print(f"[{datetime.now()}] Scheduling initial crew: {task_name}")
                active_tasks.append(asyncio.create_task(process_crew(crew, task_name)))
            
            # Process remaining crews as tasks complete
            while active_tasks or remaining_crews:
                if active_tasks:
                    # Wait for any task to complete
                    done, pending = await asyncio.wait(active_tasks, return_when=asyncio.FIRST_COMPLETED)
                    active_tasks = list(pending)
                    
                    # Process completed tasks
                    for task in done:
                        task_name, result = await task
                        results[task_name] = result
                        
                        # Start a new crew if any remain
                        if remaining_crews:
                            next_crew, next_task_name = remaining_crews.pop(0)
                            print(f"[{datetime.now()}] Scheduling next crew: {next_task_name}")
                            active_tasks.append(asyncio.create_task(process_crew(next_crew, next_task_name)))
            
            return results
                
        except Exception as e:
            print(f"[{datetime.now()}] Error in run_crew_kickoffs: {str(e)}")
            raise
        finally:
            executor.shutdown(wait=False)
            print(f"[{datetime.now()}] Executor shutdown")

    # Run crew kickoffs concurrently
    global consolidated_report
    # consolidated_report = {
    #     "overview": overview_response_formatted,
    #     "scopes": scopes_response_formatted,
    #     "tools-partners": tools_partners_response_formatted,
    #     "reporting": reporting_response_formatted,
    #     "compliance": compliance_response_formatted,
    #     "targets": targets_response_formatted,
    #     "decarbonization": decarbonization_response_formatted,

        # "overview": "<p>This is a placeholder for the Overview content.</p>",
        # "scopes": "<p>This is a placeholder for the Scopes content.</p>",
        # "tools-partners": "<p>This is a placeholder for the Teams, Tools, & Partners content.</p>",
        # "reporting": "<p>This is a placeholder for the Reporting content.</p>",
        # "compliance": "<p>This is a placeholder for the Compliance content.</p>",
        # "targets": "<p>This is a placeholder for the Reduction Targets content.</p>",
        # "decarbonization": "<p>This is a placeholder for the Decarbonization content.</p>",
    # }
    consolidated_report = await run_crew_kickoffs(company_name)

    
    return render_template(
        'result.html',
        company_name=company_name,
        consolidated_report=consolidated_report
    )


### CHATBOT

@app.route('/send_message', methods=['POST'])
def send_message():
    global conversation_history
    
    user_message = request.json.get('message')
    company_name = request.json.get('company_name', 'the company')
    
    # If conversation history is empty, initialize it with the current context
    if not conversation_history:
        system_prompt = (
            "You are an AI assistant specializing in corporate sustainability and carbon emissions. "
            f"You have access to a detailed summary of {company_name}'s sustainability efforts and emissions data. "
            "Provide clear, accurate, and concise responses based on this information. Limit your responses to 200 tokens maximum- responses can be shorter. "
            "Write in natural paragraphs without any special formatting, bullet points, or markdown. "
            "Avoid using asterisks, hashtags, or any other formatting characters. "
            "Assume the conversation builds on the summary. In responses, do not reiterate the summary as a source of information, as it is assumed. "
            f"If asked about information not contained in the report, research accordingly. Specify the source of your information, and whether it is specific to {company_name} or is general industry information."
        )
        
        # Create context from the consolidated report
        report_sections = []
        for section, content in consolidated_report.items():
            # Clean up the HTML tags for better context
            cleaned_content = content.replace('<p>', '').replace('</p>', '\n').replace('<br>', '\n')
            report_sections.append(f"{section.upper()}:\n{cleaned_content}")
        
        report_context = "\n\n".join(report_sections)
        
        # Initialize conversation with system messages
        conversation_history.extend([
            {"role": "system", "content": system_prompt},
            {"role": "system", "content": f"Here is the summary for {company_name}:\n\n{report_context}"}
        ])

    # Use the shared LLM configuration
    response = gpt4_llm.invoke([
        *conversation_history,
        {"role": "user", "content": user_message}
    ])

    assistant_message = response.content
    conversation_history.append({"role": "assistant", "content": assistant_message})

    return jsonify({
        "response": assistant_message,
        "conversation_id": len(conversation_history) - 2  # For tracking conversation turns
    })

# Add a route to clear conversation history if needed
@app.route('/clear_chat', methods=['POST'])
def clear_chat():
    global conversation_history
    conversation_history = []
    return jsonify({"status": "success", "message": "Conversation history cleared"})




if __name__ == "__main__":
    app.run(debug=True)